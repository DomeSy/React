
复合组件使我们以更敏捷的方式定义组件的外观和行为，比起继承的方式它更明确和安全。
import React from 'react'

// Dialog作为容器不关心内容和逻辑
function Dialog(props) {
  const color = props.color || 'blue';
  return (
    <div style={{ border: `4px solid ${color}` }} >
      {/* children为固定名称,类似于vue的插槽 */}
      {/* 匿名的插槽 */}
      {props.children}
      <div>
        {props.foo('这个内容是dialog传递的')}
      </div>
      <div>
        {/* 具名的插槽 */}
        {props.fotter}
      </div>
    </div>
  )
}

//WelcomeDialog通过复合提供内容
function WelcomeDialog() {
  const fotter = <button onClick={()=>alert('react')}>确定</button>
  return (
    <div>
      {/* 传递任意合法表达式 */}
      {/* foo中的c就相当于在Diglog中写的名称 */}
      <Dialog color="red" fotter={fotter} foo={(c)=><p>{c}</p>}>
        <h1>Hello World！</h1>
        <p>钟爱react</p>
      </Dialog>
    </div>
  )
}

export default function Composition() {
  return (
    <div>
      <WelcomeDialog />
    </div>
  )
}

例1：将RadioGroup组件的name属性复制给所有Radio组件
<RadioGroup name="mvvm">
      <Radio value="vue">vue</Radio>
      <Radio value="react">react</Radio>
      <Radio value="angular">angular</Radio>
 </RadioGroup>
解：使用React.cloneElement:克隆一个虚拟dome
function RadioGroup(props){
  return (
    <div>
      {
        React.Children.map(props.children, child => 
          // 第一种：将属性名直接赋值给，但React不允许添加属性，因为对象不能扩展
          // child.props.name = props.name;

          // 所以采用第二种：React.cloneElement：可以克隆一个虚拟dome
          React.cloneElement(child, { name: props.name })
        )
      }
    </div>
  )
}

function Radio(props) {
  return (
    <label>
      <input type="radio" name={props.name} />
      {props.children}
    </label>
  );
}
注：1>this.props.children:表示组件内的所有子节点
注：a.组件内是标签嵌套时，直接使用this.props.children
 b.组件内是回调函数时，使用必须用this.props.children()
 2>React.Children:为处理this.props.children这个封闭结构提供的顶层API
a.React.Children.map(this.props.children,child=>{
//child:是遍历的所有虚拟DOM的节点
.....
return child;
})
会返回一个新的集合
b.React.Children.forEach():用法与React.Children.map一样，不同的是forEach不会返回新的集合
c.React.Children.count(this.props.children):返回节点的节点个数总和。
 3>React.cloneElement(child,props):克隆组件的API
a.child:必须是已存在的React组件或者是原生DOM
b.props:配置当前的child的props，如上述增加的name属性
  如：React.cloneElement(child, { name: props.name })
c.children:配置当前的child的children,但注意不能用this.props.children，但用的比较少，尽量不用。

例2：去除FilterP中除p以外的标签
      <FilterP>
        <h1>foo</h1>
        <p>bar</p>
        <h2>head</h2>
        <p>Jerry</p>
      </FilterP>
解：
// 过滤器，消除除p标签以外的标签
function FilterP(props) {
  return (
    <div>
      {
        React.Children.map(props.children,child => {
          // child实际上是虚拟DOM
          console.log(child);
          if(child.type !== 'p'){
            return;
          }
          return child;
        })
      }
    </div>
  )
}

 

 
 