Redux:
1>状态管理的库，可预测的状态管理.
2>安装：npm i -S redux
3>Redux的设计思想：
a.Web应用是一个状态机，视图与状态是一一对应的
b.所有的状态保存在一个对象里面

Redux使用的场景
1>用户的使用方式复杂
2>不同身份的用户有不同的使用方式（比如普通用户和管理员）
3>多个用户之间可以协作
4>与服务器大量交互，或者使用WebSocket
5>View要从多个来源获取数据

Redux不使用的情况
1>如果UI层非常简单，没有很多互动，Redux就是不必要的
2>用户的使用非常简单
3>用户之间没有协作
4>不需要与服务器大量交互，也没有使用WebSocket
5>视图层（View）只从单一来源获取数据

从组件的角度来看，如果有，则用Redux
1>某个组建的状态需要共享
2>某个组件需要在任何地方都可以拿到
3>一个组件需要改变全局状态
4>一个组件需要改变另一个组件的状态
总之，Redux只是Web架构的一种解决方案